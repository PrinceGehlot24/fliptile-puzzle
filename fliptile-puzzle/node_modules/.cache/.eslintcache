[{"/Users/princegehlot/Desktop/Fliptile Puzzle/fliptile-puzzle/src/index.js":"1","/Users/princegehlot/Desktop/Fliptile Puzzle/fliptile-puzzle/src/reportWebVitals.js":"2","/Users/princegehlot/Desktop/Fliptile Puzzle/fliptile-puzzle/src/App.js":"3","/Users/princegehlot/Desktop/Fliptile Puzzle/fliptile-puzzle/src/components/PuzzleBoard.js":"4","/Users/princegehlot/Desktop/Fliptile Puzzle/fliptile-puzzle/src/components/Card.js":"5","/Users/princegehlot/Desktop/Fliptile Puzzle/fliptile-puzzle/src/components/Store.js":"6"},{"size":322,"mtime":1693514104685,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1693514104701,"results":"9","hashOfConfig":"8"},{"size":188,"mtime":1693514104667,"results":"10","hashOfConfig":"8"},{"size":2765,"mtime":1693514150116,"results":"11","hashOfConfig":"8"},{"size":1814,"mtime":1693514150092,"results":"12","hashOfConfig":"8"},{"size":7745,"mtime":1693516382455,"results":"13","hashOfConfig":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"13moh9n",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"4cmply","/Users/princegehlot/Desktop/Fliptile Puzzle/fliptile-puzzle/src/index.js",[],[],[],"/Users/princegehlot/Desktop/Fliptile Puzzle/fliptile-puzzle/src/reportWebVitals.js",[],[],"/Users/princegehlot/Desktop/Fliptile Puzzle/fliptile-puzzle/src/App.js",[],[],"/Users/princegehlot/Desktop/Fliptile Puzzle/fliptile-puzzle/src/components/PuzzleBoard.js",["37","38","39","40","41","42","43","44","45","46","47"],[],"import React, {useEffect} from 'react';\nimport './PuzzleBoard.scss';\nimport Card from './Card.js';\nimport {useStore} from './Store';\nimport Button from '@material-ui/core/Button';\n\nfunction PuzzleBaord() {\n  const shuffleInitialCardValuesOne = useStore(state => state.shuffleInitialCardValuesOne);\n  const shuffleInitialCardValuesTwo = useStore(state => state.shuffleInitialCardValuesTwo);\n  const handleFlippedCard = useStore(state => state.handleFlippedCard);\n  const flippedCards = useStore(state => state.flippedCards);\n  const countMoves = useStore(state => state.countMoves);\n  const cardFound = useStore(state => state.cardFound);\n  const isStarted = useStore(state => state.isStarted);\n  const setIsStarted = useStore(state => state.setIsStarted);\n  const level = useStore(state=> state.level);\n  const addLevel = useStore(state=> state.addLevel);\n  const subLevel = useStore(state => state.subLevel);\n  useEffect(() => {\n    {level == 1 ? shuffleInitialCardValuesOne():shuffleInitialCardValuesTwo() }    \n  }, [level])\n  const initialCardValues = useStore(state => state.initialCardValues);\n\n   return (\n    <div className='puzzle-board-main'>\n      <div className=\"puzzle-board-header\">\n            <div className=\"puzzle-title\">\n                <h1>Picture Puzzle</h1>\n            </div>\n            <div className=\"sub-header\">\n                  <div className=\"count-moves\">\n                      <span>Clicks {countMoves}</span>\n                  </div>\n                  {level == 1 ? <div className=\"count-found-cards\">\n                        <span>Matched: {cardFound} / 10</span>\n                  </div>:\n                  <div className=\"count-found-cards\">\n                        <span>Matched: {cardFound} / 16</span>\n                  </div>}\n            </div>\n      </div>\n      \n      <div className='puzzle-board-container'>\n            {level == 1 && <div className=\"puzzle-board-main-level-one\">\n                {initialCardValues.map((item, index) => (\n                  <Card card={item} key={index} handleClick={() => handleFlippedCard(index)}/>\n                ))}\n            </div>}\n            {level == 2 &&<div className=\"puzzle-board-main-level-two\">\n                {initialCardValues.map((item, index) => (\n                  <Card card={item} key={index} handleClick={() => handleFlippedCard(index)}/>\n                ))}\n            </div>}\n      </div>\n      <div className=\"puzzle-board-footer\">\n        {level == 1 &&  (<Button id=\"btn\" className='btn-start' size='large' variant=\"outlined\" onClick={addLevel}>Next</Button> )}\n        {level == 2 &&  (<Button id=\"btn\" className='btn-start' size='large' variant=\"outlined\" onClick={subLevel}>Prev</Button>)}\n\n      </div>\n    </div>\n  )\n}\n\nexport default PuzzleBaord;\n","/Users/princegehlot/Desktop/Fliptile Puzzle/fliptile-puzzle/src/components/Card.js",["48"],[],"import React from 'react';\nimport img0 from '../images/img0.png'\nimport ReactCardFlip from 'react-card-flip';\nimport {useState} from 'react';\nimport { useStore } from './Store';\n\nfunction Card({card,handleClick}) {\n    const [isFlipped, setIsFlipped] = useState(false);\n\n  return (\n    <div className='card'>\n        { ! card.complete ? (!card.isFlipped ?  \n            <ReactCardFlip isFlipped={isFlipped} flipDirection=\"horizontal\">   \n                <div\n                    onClick={function(event){setIsFlipped((prev) => !prev);handleClick()}}\n                    className={\"CardFront\"}\n                    >\n                        <img width=\"100px\" src={img0} alt=\"\" />\n                </div>\n                <div\n                    onClick={function(event){setIsFlipped((prev) => !prev);handleClick()}}\n                    className={\"CardBack\"}\n                    >\n                        <img width=\"100px\" src={card.img} alt=\"\" />\n                </div>\n            </ReactCardFlip>: \n            <ReactCardFlip isFlipped={isFlipped} flipDirection=\"horizontal\">   \n                <div\n                    onClick={function(event){setIsFlipped((prev) => !prev);handleClick()}}\n                    className={\"CardFront\"}\n                    >\n                        <img width=\"100px\" src={card.img} alt=\"\" />\n                </div>\n                <div\n                    onClick={function(event){setIsFlipped((prev) => !prev);handleClick()}}\n                    className={\"CardBack\"}\n                    >\n                        <img width=\"100px\" src={img0} alt=\"\" />\n                </div>\n            </ReactCardFlip> \n        ): \n        <div className={\"CardBack\"}>\n            <img width=\"100px\" src={card.img} alt=\"\" />\n         </div>\n        }\n    </div>\n  )\n}\n\nexport default Card;","/Users/princegehlot/Desktop/Fliptile Puzzle/fliptile-puzzle/src/components/Store.js",["49","50","51","52","53"],[],"import { create } from \"zustand\";\nimport { shallow } from \"zustand/shallow\";\nimport img1 from \"../images/img1.png\";\nimport img2 from \"../images/img2.png\";\nimport img3 from \"../images/img3.png\";\nimport img4 from \"../images/img4.png\";\nimport img5 from \"../images/img5.png\";\nimport img6 from \"../images/img6.png\";\nimport img7 from \"../images/img7.png\";\nimport img8 from \"../images/img8.png\";\nimport img9 from \"../images/img9.png\";\nimport img10 from \"../images/img10.png\";\nimport img11 from \"../images/img11.png\";\nimport img12 from \"../images/img12.png\";\nimport img13 from \"../images/img13.png\";\nimport img14 from \"../images/img14.png\";\nimport img15 from \"../images/img15.png\";\nimport img16 from \"../images/img16.png\";\n\n\nexport const useStore = create((set, get) => ({\n    cardsLevelOne: [\n        { id: \"1\", img: img1, isFlipped: false, key: 1, complete: false },\n        { id: \"2\", img: img2, isFlipped: false, key: 2, complete: false },\n        { id: \"3\", img: img3, isFlipped: false, key: 3, complete: false },\n        { id: \"4\", img: img4, isFlipped: false, key: 4, complete: false },\n        { id: \"5\", img: img5, isFlipped: false, key: 5, complete: false },\n        { id: \"6\", img: img6, isFlipped: false, key: 6, complete: false },\n        { id: \"7\", img: img7, isFlipped: false, key: 7, complete: false },\n        { id: \"8\", img: img8, isFlipped: false, key: 8, complete: false },\n        { id: \"9\", img: img9, isFlipped: false, key: 9, complete: false },\n        { id: \"10\", img: img10, isFlipped: false, key: 10, complete: false },\n        { id: \"11\", img: img1, isFlipped: false, key: 1, complete: false },\n        { id: \"12\", img: img2, isFlipped: false, key: 2, complete: false },\n        { id: \"13\", img: img3, isFlipped: false, key: 3, complete: false },\n        { id: \"14\", img: img4, isFlipped: false, key: 4, complete: false },\n        { id: \"15\", img: img5, isFlipped: false, key: 5, complete: false },\n        { id: \"16\", img: img6, isFlipped: false, key: 6, complete: false },\n        { id: \"17\", img: img7, isFlipped: false, key: 7, complete: false },\n        { id: \"18\", img: img8, isFlipped: false, key: 8, complete: false },\n        { id: \"19\", img: img9, isFlipped: false, key: 9, complete: false },\n        { id: \"20\", img: img10, isFlipped: false, key: 10, complete: false },\n    ],\n    cardsLevelTwo: [\n        { id: \"1\", img: img1, isFlipped: false, key: 1, complete: false },\n        { id: \"2\", img: img2, isFlipped: false, key: 2, complete: false },\n        { id: \"3\", img: img3, isFlipped: false, key: 3, complete: false },\n        { id: \"4\", img: img4, isFlipped: false, key: 4, complete: false },\n        { id: \"5\", img: img5, isFlipped: false, key: 5, complete: false },\n        { id: \"6\", img: img6, isFlipped: false, key: 6, complete: false },\n        { id: \"7\", img: img7, isFlipped: false, key: 7, complete: false },\n        { id: \"8\", img: img8, isFlipped: false, key: 8, complete: false },\n        { id: \"9\", img: img9, isFlipped: false, key: 9, complete: false },\n        { id: \"10\", img: img10, isFlipped: false, key: 10, complete: false },\n        { id: \"11\", img: img11, isFlipped: false, key: 11, complete: false },\n        { id: \"12\", img: img12, isFlipped: false, key: 12, complete: false },\n        { id: \"13\", img: img13, isFlipped: false, key: 13, complete: false },\n        { id: \"14\", img: img14, isFlipped: false, key: 14, complete: false },\n        { id: \"15\", img: img15, isFlipped: false, key: 15, complete: false },\n        { id: \"16\", img: img16, isFlipped: false, key: 16, complete: false },\n        { id: \"17\", img: img1, isFlipped: false, key: 1, complete: false },\n        { id: \"18\", img: img2, isFlipped: false, key: 2, complete: false },\n        { id: \"19\", img: img3, isFlipped: false, key: 3, complete: false },\n        { id: \"20\", img: img4, isFlipped: false, key: 4, complete: false },\n        { id: \"21\", img: img5, isFlipped: false, key: 5, complete: false },\n        { id: \"22\", img: img6, isFlipped: false, key: 6, complete: false },\n        { id: \"23\", img: img7, isFlipped: false, key: 7, complete: false },\n        { id: \"24\", img: img8, isFlipped: false, key: 8, complete: false },\n        { id: \"25\", img: img9, isFlipped: false, key: 9, complete: false },\n        { id: \"26\", img: img10, isFlipped: false, key: 10, complete: false },\n        { id: \"27\", img: img11, isFlipped: false, key: 11, complete: false },\n        { id: \"28\", img: img12, isFlipped: false, key: 12, complete: false },\n        { id: \"29\", img: img13, isFlipped: false, key: 13, complete: false },\n        { id: \"30\", img: img14, isFlipped: false, key: 14, complete: false },\n        { id: \"31\", img: img15, isFlipped: false, key: 15, complete: false },\n        { id: \"32\", img: img16, isFlipped: false, key: 16, complete: false },\n\n    ],\n    shuffleCards: (array) => {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    },\n    initialCardValues: [],\n    shuffleInitialCardValuesOne: () => { set({ initialCardValues: get().shuffleCards(get().cardsLevelOne) }) },\n    shuffleInitialCardValuesTwo: () => { set({ initialCardValues: get().shuffleCards(get().cardsLevelTwo) }) },\n    flippedCards: [],\n    handleFlippedCard: (index) => {\n        if (get().flippedCards.length == 0 || get().flippedCards.length == 1) {\n            set((state) => ({ flippedCards: [state.initialCardValues[index], ...state.flippedCards] }))\n            get().addCountMoves()\n            get().checkFlippedCard(get().flippedCards)\n        }\n    },\n    checkFlippedCard: (cards) => {\n        if (cards[0].id != cards[1].id && cards[0].key == cards[1].key) {\n            set(() => ({ flippedCards: [] }))\n            get().updateEqualCard(cards[0].id)\n            get().updateEqualCard(cards[1].id)\n            get().addCardFound()\n        } else {\n            set(() => ({ flippedCards: [] }))\n            setTimeout(() => {\n                get().updateUnEqualCard(cards[0].id)\n                get().updateUnEqualCard(cards[1].id)\n            }, 700);\n\n        }\n    },\n    updateEqualCard: (id) =>\n        set(state => ({\n            initialCardValues: state.initialCardValues.map(item => {\n                if (item.id === id) {\n                    return {\n                        ...item,\n                        id: item.id,\n                        img: item.img,\n                        isFlipped: !item.isFlipped,\n                        key: item.key,\n                        complete: true\n                    }\n                } else {\n                    return item;\n                }\n            })\n        })),\n    updateUnEqualCard: (id) =>\n        set(state => ({\n            initialCardValues: state.initialCardValues.map(item => {\n                if (item.id === id) {\n                    return {\n                        ...item,\n                        id: item.id,\n                        img: item.img,\n                        isFlipped: !item.isFlipped,\n                        key: item.key,\n                        complete: false\n                    }\n                } else {\n                    return item;\n                }\n            })\n        })),\n    countMoves: 0,\n    resetCountMoves: () => set({countMoves: 0}),\n    addCountMoves: () => set(prev => ({ countMoves: prev.countMoves + 1 })),\n    cardFound: 0,\n    addCardFound: () => set(prev => ({ cardFound: prev.cardFound + 1 })),\n    isStarted: false,\n    setIsStarted: () => set(prev => (!prev)),\n    level : 1,\n    addLevel: () => {set(prev => ({ level: prev.level + 1}))},\n    subLevel: () => {set(prev => ({ level: prev.level - 1}))},\n}));\n",{"ruleId":"54","severity":1,"message":"55","line":11,"column":9,"nodeType":"56","messageId":"57","endLine":11,"endColumn":21},{"ruleId":"54","severity":1,"message":"58","line":14,"column":9,"nodeType":"56","messageId":"57","endLine":14,"endColumn":18},{"ruleId":"54","severity":1,"message":"59","line":15,"column":9,"nodeType":"56","messageId":"57","endLine":15,"endColumn":21},{"ruleId":"60","severity":1,"message":"61","line":20,"column":5,"nodeType":"62","messageId":"63","endLine":20,"endColumn":80},{"ruleId":"64","severity":1,"message":"65","line":20,"column":12,"nodeType":"66","messageId":"67","endLine":20,"endColumn":14},{"ruleId":"68","severity":1,"message":"69","line":21,"column":6,"nodeType":"70","endLine":21,"endColumn":13,"suggestions":"71"},{"ruleId":"64","severity":1,"message":"65","line":34,"column":26,"nodeType":"66","messageId":"67","endLine":34,"endColumn":28},{"ruleId":"64","severity":1,"message":"65","line":44,"column":20,"nodeType":"66","messageId":"67","endLine":44,"endColumn":22},{"ruleId":"64","severity":1,"message":"65","line":49,"column":20,"nodeType":"66","messageId":"67","endLine":49,"endColumn":22},{"ruleId":"64","severity":1,"message":"65","line":56,"column":16,"nodeType":"66","messageId":"67","endLine":56,"endColumn":18},{"ruleId":"64","severity":1,"message":"65","line":57,"column":16,"nodeType":"66","messageId":"67","endLine":57,"endColumn":18},{"ruleId":"54","severity":1,"message":"72","line":5,"column":10,"nodeType":"56","messageId":"57","endLine":5,"endColumn":18},{"ruleId":"54","severity":1,"message":"73","line":2,"column":10,"nodeType":"56","messageId":"57","endLine":2,"endColumn":17},{"ruleId":"64","severity":1,"message":"65","line":93,"column":39,"nodeType":"66","messageId":"67","endLine":93,"endColumn":41},{"ruleId":"64","severity":1,"message":"65","line":93,"column":73,"nodeType":"66","messageId":"67","endLine":93,"endColumn":75},{"ruleId":"64","severity":1,"message":"74","line":100,"column":25,"nodeType":"66","messageId":"67","endLine":100,"endColumn":27},{"ruleId":"64","severity":1,"message":"65","line":100,"column":56,"nodeType":"66","messageId":"67","endLine":100,"endColumn":58},"no-unused-vars","'flippedCards' is assigned a value but never used.","Identifier","unusedVar","'isStarted' is assigned a value but never used.","'setIsStarted' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'shuffleInitialCardValuesOne' and 'shuffleInitialCardValuesTwo'. Either include them or remove the dependency array.","ArrayExpression",["75"],"'useStore' is defined but never used.","'shallow' is defined but never used.","Expected '!==' and instead saw '!='.",{"desc":"76","fix":"77"},"Update the dependencies array to be: [level, shuffleInitialCardValuesOne, shuffleInitialCardValuesTwo]",{"range":"78","text":"79"},[1019,1026],"[level, shuffleInitialCardValuesOne, shuffleInitialCardValuesTwo]"]